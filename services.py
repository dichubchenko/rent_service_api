import asyncio
from datetime import datetime, timedelta
from models import OrderStatus, OrderResponse, OrderCreateRequest, RentalOrderMessage, SMSNotification, CancelReason
from typing import Optional, Dict, List
import json

class OrderIdGenerator:
    def __init__(self):
        self.counter = 1000
    
    def generate_id(self) -> int:
        order_id = self.counter
        self.counter += 1
        return order_id

order_id_generator = OrderIdGenerator()

# –ó–∞–≥–ª—É—à–∫–∞ "—Ç–∞–±–ª–∏—Ü—ã" –∑–∞–∫–∞–∑–æ–≤
orders_db: List[OrderResponse] = []

# –ó–∞–≥–ª—É—à–∫–∞ "—Ç–∞–±–ª–∏—Ü—ã" –≤–µ—â–µ–π
items_db = {
    456: {
        "id": 456, 
        "name": "–î—Ä–µ–ª—å Makita", 
        "hourly_price": 50, 
        "is_available": True, 
        "current_pickup_point_id": 789,
        "reserved_until": None
    },
    457: {
        "id": 457, 
        "name": "–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç Bosch", 
        "hourly_price": 60, 
        "is_available": False,
        "current_pickup_point_id": 789,
        "reserved_until": datetime(2024, 1, 20, 18, 0, 0)
    },
    458: {
        "id": 458, 
        "name": "–ü–∞—É—ç—Ä–±–∞–Ω–∫ Xiaomi", 
        "hourly_price": 20, 
        "is_available": True, 
        "current_pickup_point_id": 123,
        "reserved_until": None
    }
}

# –ó–∞–≥–ª—É—à–∫–∞ "—Ç–∞–±–ª–∏—Ü—ã" –∫–ª–∏–µ–Ω—Ç–æ–≤
clients_db = {
    123: {
        "id": 123, 
        "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", 
        "phone": "+79161234567", 
        "email": "ivan@mail.ru"
    },
    124: {
        "id": 124, 
        "name": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", 
        "phone": "+79167654321", 
        "email": "petr@mail.ru"
    }
}

# –ó–∞–≥–ª—É—à–∫–∞ "—Ç–∞–±–ª–∏—Ü—ã" –ø–æ—Å—Ç–æ–º–∞—Ç–æ–≤
pickup_points_db = {
    789: {
        "id": 789, 
        "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1", 
        "working_hours": "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
        "is_active": True
    },
    123: {
        "id": 123, 
        "address": "–ø—Ä. –ú–∏—Ä–∞, –¥. 15", 
        "working_hours": "08:00-22:00",
        "is_active": True
    }
}

# --- –ò—Å–∫–ª—é—á–µ–Ω–∏—è ---

class DatabaseError(Exception):
    pass

class ItemNotAvailableError(Exception):
    pass

class ItemNotInLocationError(Exception):
    pass

class ClientNotFoundError(Exception):
    pass

class PickupPointNotFoundError(Exception):
    pass

# --- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ---

async def check_item_availability(item_id: int, pickup_point_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–∞—á–∏ –≤–µ—â–∏.
    """
    print(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏] –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—â—å {item_id} –≤ –ø–æ—Å—Ç–æ–º–∞—Ç–µ {pickup_point_id}")
    
    if item_id not in items_db:
        raise ItemNotAvailableError(f"–í–µ—â—å —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    item = items_db[item_id]
    
    if item["current_pickup_point_id"] != pickup_point_id:
        raise ItemNotInLocationError(
            f"–í–µ—â—å {item_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ—Å—Ç–æ–º–∞—Ç–µ {item['current_pickup_point_id']}, –∞ –Ω–µ –≤ {pickup_point_id}"
        )
    
    if not item["is_available"]:
        raise ItemNotAvailableError(f"–í–µ—â—å {item_id} —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if item["reserved_until"] and item["reserved_until"] < datetime.now():
        item["is_available"] = True
        item["reserved_until"] = None
    
    return item["is_available"]

async def reserve_item(item_id: int, order_id: int, rental_hours: int) -> None:
    """
    –ë—Ä–æ–Ω–∏—Ä—É–µ—Ç –≤–µ—â—å –≤ –ë–î.
    """
    print(f"[–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ] –ë—Ä–æ–Ω–∏—Ä—É–µ–º –≤–µ—â—å {item_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    
    if item_id not in items_db:
        raise DatabaseError(f"–í–µ—â—å {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü–æ–º–µ—á–∞–µ–º –≤–µ—â—å –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é
    items_db[item_id]["is_available"] = False
    items_db[item_id]["reserved_until"] = datetime.now() + timedelta(hours=rental_hours + 1)
    
    print(f"[–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ] –í–µ—â—å {item_id} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

async def cancel_order_during_creation(client_id: int, cancel_reason: CancelReason, error_details: str) -> None:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ SMS).
    """
    print(f"[–ê–≤—Ç–æ-–æ—Ç–º–µ–Ω–∞] –û—Ç–º–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {cancel_reason}")
    await send_sms_cancellation(client_id, 0, cancel_reason, error_details)


async def create_order_in_db(order_data: OrderCreateRequest) -> OrderResponse:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW.
    """
    print(f"[–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î: {order_data}")
    
    order_id = order_id_generator.generate_id()
    now = datetime.now()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW
    new_order = OrderResponse(
        id=order_id,
        status=OrderStatus.NEW,  # –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        cancel_reason=None,
        cancel_details=None,
        created_at=now,
        updated_at=now,
        **order_data.model_dump()
    )
    
    orders_db.append(new_order)
    print(f"[–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞] –ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW")
    return new_order

# --- –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–∑–∞–≥–ª—É—à–∫–∏) ---

async def send_to_kafka(message: RentalOrderMessage):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka.
    –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ kafka-python –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
    """
    print(f"\nüé´ [KAFKA] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ 'rental-orders':")
    print(f"   Order ID: {message.order_id}")
    print(f"   Client ID: {message.client_id}") 
    print(f"   Item ID: {message.item_id}")
    print(f"   Pickup Point: {message.pickup_point_id}")
    print(f"   Duration: {message.rental_duration_hours} —á–∞—Å–æ–≤")
    print(f"   Timestamp: {message.timestamp}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka
    await asyncio.sleep(0.5)
    print(f"‚úÖ [KAFKA] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {message.order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n")

async def send_sms_cancellation(client_id: int, order_id: int, reason: CancelReason):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS.
    """
    print(f"\nüì± [SMS SERVICE] –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞:")
    print(f"   Client ID: {client_id}")
    print(f"   Order ID: {order_id}")
    print(f"   Reason: {reason}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è SMS
    client = clients_db.get(client_id)
    if client:
        phone_number = client["phone"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã
        if reason == CancelReason.ITEM_NOT_AVAILABLE:
            message = f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω–µ–Ω. –í–µ—â—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        elif reason == CancelReason.ITEM_NOT_IN_LOCATION:
            message = f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω–µ–Ω. –í–µ—â—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ."
        else:
            message = f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω–µ–Ω."
        
        print(f"   To: {phone_number}")
        print(f"   Message: {message}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
        await asyncio.sleep(0.3)
        print(f"‚úÖ [SMS SERVICE] SMS –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n")
    else:
        print(f"‚ö†Ô∏è  [SMS SERVICE] –ö–ª–∏–µ–Ω—Ç {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, SMS –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n")

async def update_order_status(order_id: int, new_status: OrderStatus) -> OrderResponse:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    """
    print(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –ó–∞–∫–∞–∑ {order_id} -> {new_status}")
    
    # –ò—â–µ–º –∑–∞–∫–∞–∑
    order_to_update = None
    for order in orders_db:
        if order.id == order_id:
            order_to_update = order
            break
    
    if not order_to_update:
        raise DatabaseError(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    order_to_update.status = new_status
    order_to_update.updated_at = datetime.now()
    
    print(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_status}")
    return order_to_update



