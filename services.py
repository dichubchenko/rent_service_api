import asyncio
from datetime import datetime, timedelta
from models import OrderStatus, OrderResponse, OrderCreateRequest, RentalOrderMessage, SMSNotification, CancelReason
from typing import Optional, Dict, List
import json

# --- In-Memory "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" (–∑–∞–≥–ª—É—à–∫–∞) ---

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID –∑–∞–∫–∞–∑–æ–≤
class OrderIdGenerator:
    def __init__(self):
        self.counter = 1000  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1000 –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    
    def generate_id(self) -> int:
        order_id = self.counter
        self.counter += 1
        return order_id

order_id_generator = OrderIdGenerator()

# –ó–∞–≥–ª—É—à–∫–∞ "—Ç–∞–±–ª–∏—Ü—ã" –∑–∞–∫–∞–∑–æ–≤
orders_db: List[OrderResponse] = []

# –ó–∞–≥–ª—É—à–∫–∞ "—Ç–∞–±–ª–∏—Ü—ã" –≤–µ—â–µ–π
items_db = {
    456: {
        "id": 456, 
        "name": "–î—Ä–µ–ª—å Makita", 
        "hourly_price": 50, 
        "is_available": True, 
        "current_pickup_point_id": 789,
        "reserved_until": None  # –í—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–µ—â—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞
    },
    457: {
        "id": 457, 
        "name": "–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç Bosch", 
        "hourly_price": 60, 
        "is_available": False,  # –£–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞
        "current_pickup_point_id": 789,
        "reserved_until": datetime(2025, 12, 20, 18, 0, 0)
    },
    458: {
        "id": 458, 
        "name": "–ü–∞—É—ç—Ä–±–∞–Ω–∫ Xiaomi", 
        "hourly_price": 20, 
        "is_available": True, 
        "current_pickup_point_id": 123,  # –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –ø–æ—Å—Ç–æ–º–∞—Ç–µ
        "reserved_until": None
    }
}

# –ó–∞–≥–ª—É—à–∫–∞ "—Ç–∞–±–ª–∏—Ü—ã" –∫–ª–∏–µ–Ω—Ç–æ–≤
clients_db = {
    123: {
        "id": 123, 
        "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", 
        "phone": "+79161234567", 
        "email": "ivan@mail.ru"
    },
    124: {
        "id": 124, 
        "name": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", 
        "phone": "+79167654321", 
        "email": "petr@mail.ru"
    }
}

# –ó–∞–≥–ª—É—à–∫–∞ "—Ç–∞–±–ª–∏—Ü—ã" –ø–æ—Å—Ç–æ–º–∞—Ç–æ–≤
pickup_points_db = {
    789: {
        "id": 789, 
        "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1", 
        "working_hours": "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
        "is_active": True
    },
    123: {
        "id": 123, 
        "address": "–ø—Ä. –ú–∏—Ä–∞, –¥. 15", 
        "working_hours": "08:00-22:00",
        "is_active": True
    }
}

# --- –ò—Å–∫–ª—é—á–µ–Ω–∏—è ---

class DatabaseError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ë–î."""
    pass

class ItemNotAvailableError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–µ—â—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."""
    pass

class ItemNotInLocationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–µ—â—å –Ω–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–æ–º–∞—Ç–µ."""
    pass

class ClientNotFoundError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    pass

class PickupPointNotFoundError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ—Å—Ç–æ–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    pass

# --- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ---

async def check_item_availability(item_id: int, pickup_point_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–∞—á–∏ –≤–µ—â–∏:
    - –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ—â—å
    - –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–æ–º–∞—Ç–µ
    - –ù–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –æ–Ω–∞ –¥—Ä—É–≥–∏–º –∑–∞–∫–∞–∑–æ–º
    """
    print(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏] –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—â—å {item_id} –≤ –ø–æ—Å—Ç–æ–º–∞—Ç–µ {pickup_point_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ—â–∏
    if item_id not in items_db:
        raise ItemNotAvailableError(f"–í–µ—â—å —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    item = items_db[item_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—â—å –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Å—Ç–æ–º–∞—Ç–µ
    if item["current_pickup_point_id"] != pickup_point_id:
        raise ItemNotInLocationError(
            f"–í–µ—â—å {item_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ—Å—Ç–æ–º–∞—Ç–µ {item['current_pickup_point_id']}, –∞ –Ω–µ –≤ {pickup_point_id}"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ—â–∏
    if not item["is_available"]:
        raise ItemNotAvailableError(f"–í–µ—â—å {item_id} —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if item["reserved_until"] and item["reserved_until"] < datetime.now():
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏ –∏—Å—Ç–µ–∫–ª–æ, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤–µ—â—å
        item["is_available"] = True
        item["reserved_until"] = None
    
    return item["is_available"]

async def create_order_in_db(order_data: OrderCreateRequest) -> OrderResponse:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –ë–î –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç –≤–µ—â—å.
    """
    print(f"[–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î: {order_data}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
    order_id = order_id_generator.generate_id()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    new_order = OrderResponse(
        id=order_id,
        status=OrderStatus.PENDING,
        created_at=datetime.now(),
        **order_data.model_dump()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    orders_db.append(new_order)
    
    # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –≤–µ—â—å
    items_db[order_data.item_id]["is_available"] = False
    items_db[order_data.item_id]["reserved_until"] = datetime.now() + timedelta(
        hours=order_data.rental_duration_hours + 1  # +1 —á–∞—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    )
    
    print(f"[–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞] –ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω, –≤–µ—â—å {order_data.item_id} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞")
    return new_order

# --- –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–∑–∞–≥–ª—É—à–∫–∏) ---

async def send_to_kafka(message: RentalOrderMessage):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka.
    –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ kafka-python –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
    """
    print(f"\nüé´ [KAFKA] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ 'rental-orders':")
    print(f"   Order ID: {message.order_id}")
    print(f"   Client ID: {message.client_id}") 
    print(f"   Item ID: {message.item_id}")
    print(f"   Pickup Point: {message.pickup_point_id}")
    print(f"   Duration: {message.rental_duration_hours} —á–∞—Å–æ–≤")
    print(f"   Timestamp: {message.timestamp}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka
    await asyncio.sleep(0.5)
    print(f"‚úÖ [KAFKA] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {message.order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n")

async def cancel_order_in_db(order_id: int, cancel_reason: CancelReason, cancel_details: Optional[str] = None) -> OrderResponse:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –ë–î –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤–µ—â—å.
    """
    print(f"[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –ò—â–µ–º –∑–∞–∫–∞–∑ {order_id} –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {cancel_reason}")
    
    # –ò—â–µ–º –∑–∞–∫–∞–∑
    order_to_cancel = None
    for order in orders_db:
        if order.id == order_id:
            order_to_cancel = order
            break
    
    if not order_to_cancel:
        raise DatabaseError(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω
    if order_to_cancel.status == OrderStatus.CANCELLED:
        raise DatabaseError(f"–ó–∞–∫–∞–∑ {order_id} —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order_to_cancel.status = OrderStatus.CANCELLED
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤–µ—â—å
    if order_to_cancel.item_id in items_db:
        items_db[order_to_cancel.item_id]["is_available"] = True
        items_db[order_to_cancel.item_id]["reserved_until"] = None
        print(f"[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –í–µ—â—å {order_to_cancel.item_id} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
    
    print(f"[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {cancel_reason}")
    return order_to_cancel

async def send_cancellation_to_kafka(message: OrderCancellationMessage):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –≤ Kafka.
    """
    print(f"\nüé´ [KAFKA CANCELLATION] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –≤ —Ç–æ–ø–∏–∫ 'order-cancellations':")
    print(f"   Order ID: {message.order_id}")
    print(f"   Client ID: {message.client_id}") 
    print(f"   Item ID: {message.item_id}")
    print(f"   Pickup Point: {message.pickup_point_id}")
    print(f"   Cancel Reason: {message.cancel_reason}")
    print(f"   Cancel Details: {message.cancel_details}")
    print(f"   Timestamp: {message.timestamp}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka
    await asyncio.sleep(0.5)
    print(f"‚úÖ [KAFKA CANCELLATION] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ {message.order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n")

# –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é send_sms_cancellation –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω
async def send_sms_cancellation(client_id: int, order_id: int, reason: CancelReason, details: Optional[str] = None):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS.
    """
    print(f"\nüì± [SMS SERVICE] –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞:")
    print(f"   Client ID: {client_id}")
    print(f"   Order ID: {order_id}")
    print(f"   Reason: {reason}")
    print(f"   Details: {details}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è SMS
    client = clients_db.get(client_id)
    if client:
        phone_number = client["phone"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã
        reason_messages = {
            CancelReason.PAYMENT_FAILED: "–Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤",
            CancelReason.ITEM_ALREADY_BOOKED: "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–¥–∞—Ç—å –≤–µ—â—å (—É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞)",
            CancelReason.ITEM_WRONG_LOCATION: "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–¥–∞—Ç—å –≤–µ—â—å (–Ω–µ –≤ —ç—Ç–æ–º –ø–æ—Å—Ç–æ–º–∞—Ç–µ)", 
            CancelReason.PICKUP_DEADLINE_EXPIRED: "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–æ –≤—ã–¥–∞—á–µ –≤–µ—â–∏",
            CancelReason.CLIENT_CANCELLED: "–æ—Ç–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–æ–º",
            CancelReason.OTHER: "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏—á–∏–Ω"
        }
        
        message = f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason_messages.get(reason, '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏—á–∏–Ω')}"
        if details:
            message += f". {details}"
        
        print(f"   To: {phone_number}")
        print(f"   Message: {message}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
        await asyncio.sleep(0.3)
        print(f"‚úÖ [SMS SERVICE] SMS –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n")
    else:
        print(f"‚ö†Ô∏è  [SMS SERVICE] –ö–ª–∏–µ–Ω—Ç {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, SMS –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n")


