from fastapi import FastAPI, HTTPException, status
from models import OrderStatus, CancelReason, Order, Client, Item, Ppoint, OrderCreateRequest, OrderResponse, RentalOrderMessage
import services
from datetime import datetime
import asyncio
from typing import List

app = FastAPI(
    title="Rental Service API",
    description="API –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –≤–µ—â–µ–π",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

@app.post("/api/new_orders",
          response_model=OrderResponse,
          status_code=status.HTTP_201_CREATED,
          summary="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –∞—Ä–µ–Ω–¥—É",
          tags=["Orders"])

async def create_order(order_request: OrderCreateRequest):
#def create_order(order_request: OrderCreateRequest):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –∞—Ä–µ–Ω–¥—É –≤–µ—â–∏.
    
    –õ–æ–≥–∏–∫–∞:
    1. –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ—â–∏
    3. –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ AWAITING_PAYMENT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Kafka
    4. –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS
    """
    try:
        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order_request}")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW
        new_order = await services.create_order_in_db(order_request)
        #new_order = create_order_in_db(order_request)
        print(f"–ó–∞–∫–∞–∑ {new_order} —Å–æ–∑–¥–∞–Ω")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–¥–∞—á–∏ –≤–µ—â–∏
        await services.check_item_availability(
        #check_item_availability(
            order_request.item_id,
            order_request.pickup_point_id
        )
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {new_order}")
        
        # 3. –ë—Ä–æ–Ω–∏—Ä—É–µ–º –≤–µ—â—å
        await services.reserve_item(
        #reserve_item(
            order_request.item_id,
            new_order,
            order_request.rental_duration_hours
        )
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ AWAITING_PAYMENT
        updated_order = await services.update_order_status(new_order, OrderStatus.AWAITING_PAYMENT)
        #updated_order = update_order_status(new_order, OrderStatus.AWAITING_PAYMENT)
        print(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {new_order} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ AWAITING_PAYMENT")

        #–ù–£–ñ–ù–û –†–ê–°–ö–û–ú–ï–ù–¢–ò–¢–¨
        # 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        kafka_message = RentalOrderMessage(
            order_id=updated_order.id,
            client_id=updated_order.client_id,
            item_id=updated_order.item_id,
            pickup_point_id=updated_order.pickup_point_id,
            rental_duration_hours=updated_order.rental_duration_hours,
            status=updated_order.status,
            timestamp=datetime.now()
        )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka (fire and forget)
        asyncio.create_task(services.send_to_kafka(kafka_message))
        
        print(f"–ó–∞–∫–∞–∑ {updated_order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return updated_order

    except (services.ItemNotAvailableError, services.ItemNotInLocationError, services.DatabaseError, services.ItemNotFoundInTable, services.ItemNotFoundError) as e:
    #except (ItemNotAvailableError, ItemNotInLocationError, DatabaseError, ItemNotFoundInTable, ItemNotFoundError) as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã
        if isinstance(e, services.DatabaseError):
        # if isinstance(e, DatabaseError):
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=str(e)
              )
        elif isinstance(e, services.ItemNotFoundInTable) or isinstance(e, services.ItemNotFoundError):
        #elif isinstance(e, ItemNotFoundInTable) or isinstance(e, ItemNotFoundError):
            cancel_reason = CancelReason.ITEM_NOT_FOUND
        elif isinstance(e, services.ItemNotAvailableError):
        #elif isinstance(e, ItemNotAvailableError):
            cancel_reason = CancelReason.ITEM_NOT_AVAILABLE
        elif isinstance(e, services.ItemNotInLocationError):
        #elif isinstance(e, ItemNotInLocationError):
            cancel_reason = CancelReason.ITEM_NOT_IN_LOCATION
        else:
            cancel_reason = CancelReason.OTHER
        
        # –û—Ç–º–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await services.cancel_order(
        #cancel_order(
            order_request.client_id,
            new_order,
            cancel_reason
        )
        
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail=str(e)
        )

    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error."
        )

@app.get("/")
async def root():
    return {
        "message": "Rental Service API", 
        "version": "1.0.0",
        "docs": "/docs",
        "status": "running"
    }

@app.get("/api/debug/items")
async def debug_items():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—â–µ–π"""
    return {"items": services.items_db}

@app.get("/api/debug/orders")
async def debug_orders():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    return {"orders": services.orders_db}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

@app.post("/api/debug/reset")
async def reset_database():
    """
    –°–±—Ä–æ—Å –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.
    –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏!
    """
    import services
    import importlib
    importlib.reload(services)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å services
    
    print("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
    return {"message": "Database reset successfully", "orders_count": len(services.orders_db)}
