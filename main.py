from fastapi import FastAPI, HTTPException, status
from models import OrderCreateRequest, OrderResponse, RentalOrderMessage, CancelReason
import services
from datetime import datetime
import asyncio

app = FastAPI(
    title="Rental Service API",
    description="API –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –≤–µ—â–µ–π",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

@app.post("/api/orders",
          response_model=OrderResponse,
          status_code=status.HTTP_201_CREATED,
          summary="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –∞—Ä–µ–Ω–¥—É",
          tags=["Orders"])
async def create_order(order_request: OrderCreateRequest):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –∞—Ä–µ–Ω–¥—É –≤–µ—â–∏.
    
    –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–∞—á–∏ –≤–µ—â–∏ (–Ω–∞–ª–∏—á–∏–µ –≤ –ø–æ—Å—Ç–æ–º–∞—Ç–µ, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±—Ä–æ–Ω–∏)
    - –ï—Å–ª–∏ –≤–µ—â—å –¥–æ—Å—Ç—É–ø–Ω–∞: —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka
    - –ï—Å–ª–∏ –≤–µ—â—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS –æ–± –æ—Ç–º–µ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
    """
    try:
        print(f"üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order_request}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–¥–∞—á–∏ –≤–µ—â–∏
        await services.check_item_availability(
            order_request.item_id,
            order_request.pickup_point_id
        )
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—â–∏
        new_order = await services.create_order_in_db(order_request)
        
        # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        kafka_message = RentalOrderMessage(
            order_id=new_order.id,
            client_id=new_order.client_id,
            item_id=new_order.item_id,
            pickup_point_id=new_order.pickup_point_id,
            rental_duration_hours=new_order.rental_duration_hours,
            timestamp=datetime.now()
        )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka (fire and forget)
        asyncio.create_task(services.send_to_kafka(kafka_message))
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ {new_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return new_order

    except services.ItemNotAvailableError as e:
        print(f"‚ùå –í–µ—â—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å–µ—Ä–≤–∏—Å SMS –Ω–∞ –æ—Ç–º–µ–Ω—É
        await services.send_sms_cancellation(
            order_request.client_id,
            0,  # order_id –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
            CancelReason.ITEM_NOT_AVAILABLE
        )
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail=str(e)
        )
        
    except services.ItemNotInLocationError as e:
        print(f"‚ùå –í–µ—â—å –Ω–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ: {e}")
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å–µ—Ä–≤–∏—Å SMS –Ω–∞ –æ—Ç–º–µ–Ω—É
        await services.send_sms_cancellation(
            order_request.client_id,
            0,  # order_id –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω  
            CancelReason.ITEM_NOT_IN_LOCATION
        )
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail=str(e)
        )
        
    except services.ClientNotFoundError as e:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=str(e)
        )
    except services.PickupPointNotFoundError as e:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, 
            detail=str(e)
        )
    except Exception as e:
        print(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error."
        )

@app.get("/")
async def root():
    return {
        "message": "Rental Service API", 
        "version": "1.0.0",
        "docs": "/docs",
        "status": "running"
    }

@app.get("/api/debug/items")
async def debug_items():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—â–µ–π"""
    return {"items": services.items_db}

@app.get("/api/debug/orders")
async def debug_orders():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    return {"orders": services.orders_db}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
